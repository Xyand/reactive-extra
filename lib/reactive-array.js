// Generated by CoffeeScript 1.6.2
(function() {
  this.ReactiveArray = (function() {
    function ReactiveArray() {
      var self;

      this._definePrivateProperty('_list', []);
      this._definePrivateProperty('_listDeps', []);
      this._definePrivateProperty('_listLengthDep', new Deps.Dependency());
      this._definePrivateProperty('_listValueDep', new Deps.Dependency());
      this._definePrivateProperty('_listPropertyLengh', 0);
      self = this;
      Object.defineProperty(this, 'length', {
        configurable: false,
        enumerable: false,
        get: function() {
          this._listLengthDep.depend();
          return self._list.length;
        },
        set: function(length) {
          self._list.length = length;
          self._syncIndexProxies();
          return self._list.length;
        }
      });
      if (arguments.length > 0) {
        this._list = _.toArray(arguments);
        this._syncIndexProxies(true);
      }
    }

    ReactiveArray.prototype.toArray = function() {
      this._listLengthDep.depend();
      this._listValueDep.depend();
      return this._list.slice();
    };

    ReactiveArray.prototype.reverse = function() {
      Array.prototype.reverse.apply(this._list);
      for (left = 0, right = this._list.length - 1; left < right; left += 1, right -= 1) {
      if (left === right) { continue; }
      if (this._listDeps[left]) { this._listDeps[left].changed(); }
      if (this._listDeps[right]) { this._listDeps[right].changed(); }
    };
      this._listValueDep.changed();
      return this;
    };

    ReactiveArray.prototype.sort = function() {
      var dep, i, orgList, _i, _len, _ref;

      orgList = this._list.slice();
      Array.prototype.sort.apply(this._list, arguments);
      _ref = this._listDeps;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        dep = _ref[i];
        if (dep && orgList[i] !== this._list[i]) {
          dep.changed();
        }
      }
      this._listValueDep.changed();
      return this;
    };

    ReactiveArray.prototype.indexOf = function(searchElement, fromIndex) {
      var i, idx, _base, _i, _ref, _ref1;

      fromIndex = typeof isSorted == 'number' ? fromIndex : 0;
      idx = _.indexOf(this._list, searchElement, fromIndex);
      if (idx === -1) {
        this._listLengthDep.depend();
        this._listValueDep.depend();
      } else {
        for (i = _i = fromIndex, _ref = idx + 1; _i < _ref; i = _i += 1) {
          if ((_ref1 = (_base = this._listDeps)[i]) == null) {
            _base[i] = new Deps.Dependency();
          }
          this._listDeps[i].depend();
        }
      }
      return idx;
    };

    ReactiveArray.prototype.lastIndexOf = function(searchElement, fromIndex) {
      var i, idx, _base, _i, _ref;

      fromIndex = typeof isSorted == 'number' ? fromIndex : this.length;
      idx = _.lastIndexOf(this._list, searchElement, fromIndex);
      if (idx === -1) {
        this._listValueDep.depend();
      } else {
        for (i = _i = idx; _i < fromIndex; i = _i += 1) {
          if ((_ref = (_base = this._listDeps)[i]) == null) {
            _base[i] = new Deps.Dependency();
          }
          this._listDeps[i].depend();
        }
      }
      return idx;
    };

    ReactiveArray.prototype.forEach = function(iterator, thisArg) {
      var i, _i, _ref;

      for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 1) {
        iterator.call(thisArg, this[i], i, this);
      }
    };

    ReactiveArray.prototype.every = function(iterator, thisArg) {
      var i, _base, _i, _ref, _ref1;

      for (i = _i = 0, _ref = this._list.length; _i < _ref; i = _i += 1) {
        if (!iterator.call(thisArg, this._list[i], i, this)) {
          if ((_ref1 = (_base = this._listDeps)[i]) == null) {
            _base[i] = new Deps.Dependency();
          }
          this._listDeps[i].depend();
          return false;
        }
      }
      this._listLengthDep.depend();
      this._listValueDep.depend();
      return true;
    };

    ReactiveArray.prototype.some = function(iterator, thisArg) {
      var i, _base, _i, _ref, _ref1;

      for (i = _i = 0, _ref = this._list.length; _i < _ref; i = _i += 1) {
        if (!!iterator.call(thisArg, this._list[i], i, this)) {
          if ((_ref1 = (_base = this._listDeps)[i]) == null) {
            _base[i] = new Deps.Dependency();
          }
          this._listDeps[i].depend();
          return true;
        }
      }
      this._listLengthDep.depend();
      this._listValueDep.depend();
      return false;
    };

    ReactiveArray.prototype.clone = function() {
      return this.constructor.wrap(this._list);
    };

    ReactiveArray.prototype.equals = function(obj) {
      return (obj != null) && obj instanceof ReactiveArray && _.isEqual(obj._list, this._list);
    };

    ReactiveArray.prototype.typeName = function() {
      return 'reactive-array';
    };

    ReactiveArray.prototype.toJSONValue = function() {
      return EJSON.toJSONValue(this._list);
    };

    ReactiveArray.prototype._syncIndexProxies = function(suppress) {
      var dep, i, _i, _j, _ref, _ref1, _ref2, _ref3;

      if (this.length > this._listPropertyLengh) {
        for (i = _i = _ref = this._listPropertyLengh, _ref1 = this.length; _i < _ref1; i = _i += 1) {
          this._defineIndexProperty(i);
        }
      } else if (this._listPropertyLengh > this.length) {
        for (i = _j = _ref2 = this.length, _ref3 = this._listPropertyLengh; _j < _ref3; i = _j += 1) {
          dep = this._listDeps[i];
          delete this[i];
          delete this._list[i];
          delete this._listDeps[i];
          if (dep) {
            dep.changed();
          }
        }
      }
      if (!suppress && this._listPropertyLengh !== this._list.length) {
        this._listLengthDep.changed();
        this._listValueDep.changed();
      }
      return this._listPropertyLengh = this._list.length;
    };

    ReactiveArray.prototype._defineIndexProperty = function(i) {
      return Object.defineProperty(this, i, {
        configurable: true,
        enumerable: true,
        set: this._indexSet.bind(this, i),
        get: this._indexGet.bind(this, i)
      });
    };

    ReactiveArray.prototype._indexGet = function(i) {
      var _base, _ref;

      if ((_ref = (_base = this._listDeps)[i]) == null) {
        _base[i] = new Deps.Dependency();
      }
      this._listDeps[i].depend();
      return this._list[i];
    };

    ReactiveArray.prototype._indexSet = function(i, val) {
      var _ref;

      if (this._list[i] !== val) {
        this._list[i] = val;
        if ((_ref = this._listDeps[i]) != null) {
          _ref.changed();
        }
        this._listValueDep.changed();
      }
      return val;
    };

    ReactiveArray.prototype._definePrivateProperty = function(name, value) {
      return Object.defineProperty(this, name, {
        configurable: true,
        enumerable: false,
        writable: true,
        value: value
      });
    };

    return ReactiveArray;

  })();

  _.each(['pop', 'push'], function(m) {
    return ReactiveArray.prototype[m] = function() {
      var rtn;

      rtn = Array.prototype[m].apply(this._list, arguments);
      this._syncIndexProxies();
      return rtn;
    };
  });

  _.each(['shift', 'splice', 'unshift'], function(m) {
    return ReactiveArray.prototype[m] = function() {
      var dep, i, orgList, rtn, _i, _len, _ref;

      orgList = this._list.slice();
      rtn = Array.prototype[m].apply(this._list, arguments);
      this._syncIndexProxies();
      _ref = this._listDeps;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        dep = _ref[i];
        if (dep && orgList[i] !== this._list[i]) {
          dep.changed();
        }
      }
      return rtn;
    };
  });

  _.each(['concat', 'slice'], function(m) {
    return ReactiveArray.prototype[m] = function() {
      var rtn;

      rtn = Array.prototype[m].apply(this._list, arguments);
      this._listLengthDep.depend();
      this._listValueDep.depend();
      return this.constructor.wrap(rtn);
    };
  });

  _.each(['join', 'toString'], function(m) {
    return ReactiveArray.prototype[m] = function() {
      var rtn;

      rtn = Array.prototype[m].apply(this._list, arguments);
      this._listLengthDep.depend();
      this._listValueDep.depend();
      return rtn;
    };
  });

  _.each(['filter', 'map'], function(m) {
    return ReactiveArray.prototype[m] = function(iterator, thisArg) {
      var iteratorProxy, rtn, self;

      self = this;
      iteratorProxy = function(value, index) {
        return iterator.call(this, value, index, self);
      };
      rtn = _[m].call(null, this._list, iteratorProxy, thisArg);
      this._listLengthDep.depend();
      this._listValueDep.depend();
      return this.constructor.wrap(rtn);
    };
  });

  _.each(['reduce', 'reduceRight'], function(m) {
    return ReactiveArray.prototype[m] = function(iterator, initialValue, thisArg) {
      var iteratorProxy, rtn, self;

      self = this;
      iteratorProxy = function(previousValue, currentValue, index) {
        return iterator.call(this, previousValue, currentValue, index, self);
      };
      if (arguments.length > 1) {
        rtn = _[m].call(null, this._list, iteratorProxy, initialValue, thisArg);
      } else {
        rtn = _[m].call(null, this._list, iteratorProxy);
      }
      this._listLengthDep.depend();
      this._listValueDep.depend();
      return rtn;
    };
  });

  ReactiveArray.wrap = function(arr) {
    var obj;

    obj = new ReactiveArray;
    obj._list = _.toArray(arr);
    obj._syncIndexProxies(true);
    return obj;
  };

  EJSON.addType('reactive-array', function(jsonObj) {
    return ReactiveArray.wrap(jsonObj);
  });

}).call(this);
